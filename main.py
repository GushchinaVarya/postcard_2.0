from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, ParseMode
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler
from telegram.ext import CallbackContext, ConversationHandler
from telegram.utils.request import Request
from config import *
from db import *
from picture import write_wish, write_from
import os
from appearance_funtions import *

logger = getLogger(__name__)

NAME, CONFIRM, WELCOME_SPEECH, FOUNDATION_0, METHOD_0, FOUNDATION_1, METHOD_1, FOUNDATION_2, METHOD_2, N_FOUNDS, THANKS_SPEECH, WISH, FROM_WHOM, FOUND_WISHLIST, WISH_MODE, FROM_MODE = range(16)


BUTTON1_FIND = "–ù–∞–π—Ç–∏ –≤–∏—à–ª–∏—Å—Ç üîé"
BUTTON2_MAKE = "–°–æ–∑–¥–∞—Ç—å –≤–∏—à–ª–∏—Å—Ç üìù"
BUTTON3_SHOW = "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–æ–∏ –≤–∏—à–ª–∏—Å—Ç—ã ‚öôÔ∏è"
BUTTON4_GENERATE_POSTCARD = "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É"
BUTTON5_ANONYMOUS_SEND = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ"
BUTTON6_ADD_NAME = "–ü–æ–¥–ø–∏—Å–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É"
BUTTON7_ADD_SCREENSHOT = "–î–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞"
BUTTON8_NO_SCREENSHOT = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"
BUTTON9_READY = "–ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä—É –≤–∏—à–ª–∏—Å—Ç–∞!"

CALLBACK_BUTTON1_FIND = "callback_button_find"
CALLBACK_BUTTON2_MAKE = "callback_button_make"
CALLBACK_BUTTON3_SHOW = "callback_button_show"
CALLBACK_BUTTON4_GENERATE_POSTCARD = "callback_button_generate_postcard"
CALLBACK_BUTTON5_ANONYMOUS_SEND = "callback_button_anonymous_send"
CALLBACK_BUTTON6_ADD_NAME = "callback_button_add_name"
CALLBACK_BUTTON7_ADD_SCREENSHOT = "callback_button_add_screenshot"
CALLBACK_BUTTON8_NO_SCREENSHOT = "callback_button_no_screenshot"
CALLBACK_BUTTON9_READY = "callback_button_ready"

BUTTON_SAVE_WISHLIST = "Co—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏—à–ª–∏—Å—Ç"


def debug_request(f):
    def inner(*args, **kwargs):
        try:
            logger.info(f"–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é {f.__name__}")
            return f(*args, **kwargs)
        except:
            logger.exception(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ {f.__name__}")
            raise
    return inner


@debug_request
def start_buttons_handler(update: Update, context: CallbackContext):
    context.user_data[WISH_MODE] = 'False'
    context.user_data[FROM_MODE] = 'False'
    keyboard = [
        [InlineKeyboardButton(BUTTON1_FIND, callback_data=CALLBACK_BUTTON1_FIND)],
        [InlineKeyboardButton(BUTTON2_MAKE, callback_data=CALLBACK_BUTTON2_MAKE)],
        [InlineKeyboardButton(BUTTON3_SHOW, callback_data=CALLBACK_BUTTON3_SHOW)],
    ]
    update.message.reply_text(
        text='''
*–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç ¬´–í–º–µ—Å—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∫–∏¬ª*

–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –≤–∏—à–ª–∏—Å—Ç: —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –≤ –æ–¥–Ω—É –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤–∞—à–∏ –¥—Ä—É–∑—å—è –º–æ–≥—É—Ç —Å–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥–∞—Ä–∫–∞ –≤–∞–º.
–¢–∞–∫–∂–µ –±–æ—Ç –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤–∏—à–ª–∏—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–∫—Ä—ã—Ç–∫—É –∞–≤—Ç–æ—Ä—É –≤–∏—à–ª–∏—Å—Ç–∞. 

–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ - /about
*–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:*''',
        reply_markup=InlineKeyboardMarkup(keyboard, one_time_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

@debug_request
def do_create(update: Update, context: CallbackContext):
    init = update.callback_query.data
    chat_id = update.callback_query.message.chat.id
    if init == CALLBACK_BUTTON1_FIND:
        context.user_data[WISH_MODE] = 'False'
        context.user_data[FROM_MODE] = 'False'
        update.callback_query.bot.send_message(
            chat_id=chat_id,
            text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏—à–ª–∏—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è –∑–Ω–∞–∫ #\n\n–ø—Ä–∏–º–µ—Ä #–î–µ–Ω—å–†–æ–∂–¥–µ–Ω–∏—è–ò–≤–∞–Ω–∞–ò–≤–∞–Ω–æ–≤–∞01–Ø–Ω–≤2021',
            reply_markup=ReplyKeyboardRemove()

        )

    if init == CALLBACK_BUTTON3_SHOW:
        context.user_data[WISH_MODE] = 'False'
        context.user_data[FROM_MODE] = 'False'
        wishlists = show_my_wishlists(user_id=chat_id, limit=10)
        if len(wishlists) == 0:
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text='–ü–æ–∫–∞ —É –≤–∞—Å –Ω–µ—Ç –≤–∏—à–ª–∏—Å—Ç–æ–≤. –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —á–µ–π-—Ç–æ –≤–∏—à–ª–∏—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –≤–∞—à –ø–µ—Ä–≤—ã–π –≤–∏—à–ª–∏—Å—Ç –Ω–∞–∂–º–∏—Ç–µ /start',
                reply_markup=ReplyKeyboardRemove()

            )
        else:
            for wishlist_i in wishlists:
                update.callback_query.bot.send_message(
                    chat_id=chat_id,
                    text=print_wishlist_with_thanks(wishlist_i),
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=True
                )
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text='–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π –≤–∏—à–ª–∏—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–∂–º–∏—Ç–µ /start',
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True,
                reply_markup=ReplyKeyboardRemove()

            )
    if init == CALLBACK_BUTTON2_MAKE:
        context.user_data[WISH_MODE] = 'False'
        context.user_data[FROM_MODE] = 'False'
        logger.debug(init)
        update.callback_query.bot.send_message(
            chat_id=chat_id,
            text='''
<b>–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –≤–∏—à–ª–∏—Å—Ç–∞.</b>
–û–¥–Ω–æ —Å–ª–æ–≤–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤. –ü—Ä–∏–º–µ—Ä –î–µ–Ω—å–†–æ–∂–¥–µ–Ω–∏—è–ò–≤–∞–Ω–∞–ò–≤–∞–Ω–æ–≤–∞01–Ø–Ω–≤2021''',
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.HTML
        )
        return NAME

    if init == CALLBACK_BUTTON4_GENERATE_POSTCARD:
        context.user_data[WISH_MODE] = 'True'
        context.user_data[FROM_MODE] = 'False'
        update.callback_query.bot.send_message(
            chat_id=chat_id,
            text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–µ (–¥–æ {WISH_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤) –ø–æ–∂–µ–ª–∞–Ω–∏–µ\n–Ω–∞–ø—Ä–∏–º–µ—Ä: –°—á–∞—Å—Ç—å—è –∑–¥–æ—Ä–æ–≤—å—è',
            parse_mode=ParseMode.HTML
        )

    if init == CALLBACK_BUTTON6_ADD_NAME:
        context.user_data[WISH_MODE] = 'False'
        context.user_data[FROM_MODE] = 'True'
        update.callback_query.bot.send_message(
            chat_id=chat_id,
            text='–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å\n–Ω–∞–ø—Ä–∏–º–µ—Ä: O—Ç —Ç–≤–æ–µ–π –ª—É—á—à–µ–π –ø–æ–¥—Ä—É–≥–∏',
            parse_mode=ParseMode.HTML
        )

    elif init == CALLBACK_BUTTON5_ANONYMOUS_SEND:
        context.user_data[FROM_MODE] = 'False'
        context.user_data[WISH_MODE] = 'False'
        keyboard = [
            [InlineKeyboardButton(BUTTON7_ADD_SCREENSHOT, callback_data=CALLBACK_BUTTON7_ADD_SCREENSHOT)],
            [InlineKeyboardButton(BUTTON8_NO_SCREENSHOT, callback_data=CALLBACK_BUTTON8_NO_SCREENSHOT)]
        ]
        pic_name = 'wish_' + str(chat_id) + '_' +PICTURE_NAME
        update.callback_query.bot.sendPhoto(
            chat_id=chat_id,
            photo=open(pic_name, 'rb'),
        )
        update.callback_query.bot.send_message(
            chat_id=chat_id,
            text=f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∫—Ä—ã—Ç–∫–∏ ‚¨ÜÔ∏è \n(–í–∞—à–∞ –æ—Ç–∫—Ä—ã—Ç–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ)",
            reply_markup=InlineKeyboardMarkup(keyboard, one_time_keyboard=True),
        )

    elif init == CALLBACK_BUTTON7_ADD_SCREENSHOT:
        context.user_data[FROM_MODE] = 'False'
        context.user_data[WISH_MODE] = 'False'
        update.callback_query.bot.send_message(
            chat_id=chat_id,
            text='–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞'
        )

    elif init == CALLBACK_BUTTON8_NO_SCREENSHOT:
        context.user_data[WISH_MODE] = 'False'
        context.user_data[FROM_MODE] = 'False'
        wishlist = find_wishlist(namelowreg=(context.user_data[FOUND_WISHLIST]).lower(), limit=1)
        wishlist_author_user_id = wishlist[0][0]
        wishlist_thanks_message = wishlist[0][9]
        bot = update.callback_query.bot
        if os.path.exists('from_' + str(chat_id) + '_' + PICTURE_NAME):
            pic_name = 'from_' + str(chat_id) + '_' + PICTURE_NAME
        else:
            pic_name = 'wish_' + str(chat_id) + '_' + PICTURE_NAME
        bot.send_message(
            chat_id=wishlist_author_user_id,
            text=f'üíå –í–ê–ú –ù–û–í–ê–Ø –û–¢–ö–†–´–¢–ö–ê!üíå \n\n\n',
        )
        bot.sendPhoto(
            chat_id=wishlist_author_user_id,
            photo=open(pic_name, 'rb'),
        )
        update.callback_query.bot.send_message(
            chat_id=chat_id,
            text=f'''
üì§ –í–∞—à–∞ –æ—Ç–∫—Ä—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ—Ä—É –≤–∏—à–ª–∏—Å—Ç–∞ üì§ \n\n
–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–≤—Ç–æ—Ä–∞ –≤–∏—à–ª–∏—Å—Ç–∞: <b>{wishlist_thanks_message}</b>\n
–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º.
–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π –≤–∏—à–ª–∏—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –Ω–∞–∂–º–∏—Ç–µ /start''',
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.HTML
        )
        os.system(f"(rm -rf {'from_' + str(chat_id) + '_' + PICTURE_NAME})")
        os.system(f"(rm -rf {'wish_' + str(chat_id) + '_' + PICTURE_NAME})")

    elif init == CALLBACK_BUTTON9_READY:
        context.user_data[FROM_MODE] = 'False'
        context.user_data[WISH_MODE] = 'False'
        wishlist = find_wishlist(namelowreg=(context.user_data[FOUND_WISHLIST]).lower(), limit=1)
        wishlist_author_user_id = wishlist[0][0]
        wishlist_thanks_message = wishlist[0][9]
        if os.path.exists('from_' + str(chat_id) + '_' + PICTURE_NAME):
            pic_name = 'from_' + str(chat_id) + '_' + PICTURE_NAME
        else:
            pic_name = 'wish_' + str(chat_id) + '_' + PICTURE_NAME
        bot = update.callback_query.bot
        bot.send_message(
            chat_id=wishlist_author_user_id,
            text=f'üíå –í–ê–ú –ù–û–í–ê–Ø –û–¢–ö–†–´–¢–ö–ê!üíå \n\n\n',
        )
        bot.sendPhoto(
            chat_id=wishlist_author_user_id,
            photo=open(pic_name, 'rb'),
        )
        bot.sendPhoto(
            chat_id=wishlist_author_user_id,
            photo=open('screen_' + str(chat_id) + '.png', 'rb'),
        )
        bot.send_message(
            chat_id=chat_id,
            text=f'''
üì§ –í–∞—à–∞ –æ—Ç–∫—Ä—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ—Ä—É –≤–∏—à–ª–∏—Å—Ç–∞ üì§ \n\n
–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–≤—Ç–æ—Ä–∞ –≤–∏—à–ª–∏—Å—Ç–∞: <b>{wishlist_thanks_message}</b>\n
–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º.
–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π –≤–∏—à–ª–∏—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –Ω–∞–∂–º–∏—Ç–µ /start''',
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.HTML
        )
        os.system("(rm -rf screen_" + str(chat_id) + ".png)")
        os.system(f"(rm -rf {'from_' + str(chat_id) + '_' + PICTURE_NAME})")
        os.system(f"(rm -rf {'wish_' + str(chat_id) + '_' + PICTURE_NAME})")

@debug_request
def message_handler(update: Update, context: CallbackContext):
    text = update.message.text
    if text[0] == '#':
        wishlistname = text[1:]
        wishlist = find_wishlist(namelowreg=wishlistname.lower(), limit=1)
        if wishlist:
            context.user_data[FOUND_WISHLIST] = wishlistname
            keyboard = [[InlineKeyboardButton(BUTTON4_GENERATE_POSTCARD, callback_data=CALLBACK_BUTTON4_GENERATE_POSTCARD)]]
            reply_text = print_wishlist(wishlist[0])
            update.message.reply_text(
                text=f'–í–∏—à–ª–∏—Å—Ç –Ω–∞–π–¥–µ–Ω!‚úîÔ∏è\n\n\n{reply_text}\n\n\n–¢–µ–ø–µ—Ä—å –≤—ã –∑–Ω–∞–µ—Ç–µ —á—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ—Ä –≤–∏—à–ª–∏—Å—Ç–∞.\n–ú–æ–∂–µ—Ç–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –≤ –æ–¥–Ω—É –∏—Ö —ç—Ç–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É. –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–µ –∞–≤—Ç–æ—Ä—É. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ –Ω–∞–∂–º–∏—Ç–µ /start',
                reply_markup=InlineKeyboardMarkup(keyboard, one_time_keyboard=True),
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
        else:
            update.message.reply_text(
                text='–í–∏—à–ª–∏—Å—Ç c —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∏—à–ª–∏—Å—Ç.',
                reply_markup=ReplyKeyboardRemove()
            )

    else:
        if context.user_data[WISH_MODE] == 'True':
            wishtext = text
            if len(wishtext) > WISH_LIMIT:
                update.message.reply_text(
                    text="–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ"
                )
            else:
                context.user_data[WISH] = wishtext
                logger.info('user_data: %s', context.user_data)
                keyboard = [
                    [InlineKeyboardButton(BUTTON5_ANONYMOUS_SEND, callback_data=CALLBACK_BUTTON5_ANONYMOUS_SEND)],
                    [InlineKeyboardButton(BUTTON6_ADD_NAME, callback_data=CALLBACK_BUTTON6_ADD_NAME)],
                ]
                pic_name = 'wish_'+str(update.message.chat.id)+'_'+PICTURE_NAME
                write_wish(text=wishtext, pic_name=PICTURE_NAME, new_name=pic_name)
                context.bot.sendPhoto(
                    chat_id=update.message.chat.id,
                    photo=open(pic_name, 'rb'),
                )
                update.message.reply_text(
                    text=f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∫—Ä—ã—Ç–∫–∏ ‚¨ÜÔ∏è\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ. –õ–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–∞ –ª–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–µ –ø–æ–¥–ø–∏—Å—å‚¨áÔ∏è",
                    reply_markup=InlineKeyboardMarkup(keyboard, one_time_keyboard=True),
                )
        elif context.user_data[FROM_MODE] == 'True':
            from_whom = text
            context.user_data[FROM_WHOM] = from_whom
            logger.info('user_data: %s', context.user_data)
            keyboard = [
                [InlineKeyboardButton(BUTTON7_ADD_SCREENSHOT, callback_data=CALLBACK_BUTTON7_ADD_SCREENSHOT)],
                [InlineKeyboardButton(BUTTON8_NO_SCREENSHOT, callback_data=CALLBACK_BUTTON8_NO_SCREENSHOT)]
            ]
            pic_name_wish = 'wish_' + str(update.message.chat.id) + '_' + PICTURE_NAME
            pic_name = 'from_'+str(update.message.chat.id) + '_' + PICTURE_NAME
            write_from(text=from_whom, pic_name=pic_name_wish, new_name=pic_name)
            context.bot.sendPhoto(
                chat_id=update.message.chat.id,
                photo=open(pic_name, 'rb'),
            )
            update.message.reply_text(
                text=f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∫—Ä—ã—Ç–∫–∏ ‚¨ÜÔ∏è\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ–¥–ø–∏—Å—å, –≤–≤–µ–¥–∏—Ç–µ –µ–µ –∑–∞–Ω–æ–≤–æ. –õ–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.",
                reply_markup=InlineKeyboardMarkup(keyboard, one_time_keyboard=True),
            )
        else:
            update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞')

def photo_handler(update: Update, context: CallbackContext):
    context.user_data[WISH_MODE] = 'False'
    context.user_data[FROM_MODE] = 'False'
    name_screenshot = 'screen_'+str(update.message.chat.id)+'.png'
    photo_file = update.message.photo[-1].get_file()
    photo_file.download(name_screenshot)
    logger.info("Photo of %s", name_screenshot)
    keyboard = [[InlineKeyboardButton(BUTTON9_READY, callback_data=CALLBACK_BUTTON9_READY)]]
    update.message.reply_text(
        text='–°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω',
        reply_markup=InlineKeyboardMarkup(keyboard, one_time_keyboard=True),
    )

@debug_request
def name_handler(update: Update, context: CallbackContext):
    context.user_data[WISH_MODE] = 'False'
    context.user_data[FROM_MODE] = 'False'
    name = update.message.text
    if len(name.split(' ')) > 1:
        update.message.reply_text(
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.',
            parse_mode=ParseMode.HTML,
        )
    else:
        if wishlist_name_available(namelowreg=name.lower()):
            context.user_data[NAME] = name
            logger.info('user_data: %s', context.user_data)
            update.message.reply_text(
                text='''
–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ‚úîÔ∏è.
–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –¥—Ä—É–∑—å—è–º.
–ü—Ä–∏–º–µ—Ä:
–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤. –ë—É–¥—É —Ä–∞–¥ –µ—Å–ª–∏ –≤—ã –ø–æ–∂–µ—Ä—Ç–≤—É–µ—Ç–µ –≤ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ–Ω–¥–æ–≤, –¥–ª—è –º–µ–Ω—è –∏—Ö –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞.
''',
                parse_mode=ParseMode.HTML,
            )
            return WELCOME_SPEECH
        else:
            update.message.reply_text(
                text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–Ω—è—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.',
                parse_mode=ParseMode.HTML,
            )

def welcome_speech_handler(update: Update, context: CallbackContext):
    context.user_data[WELCOME_SPEECH] = update.message.text
    update.message.reply_text(
        text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–º–∞–∫—Å–∏–º—É–º - 3)',
        parse_mode=ParseMode.HTML,
    )
    return FOUNDATION_0

@debug_request
def foundation_0_handler(update: Update, context: CallbackContext):
    context.user_data[FOUNDATION_0] = update.message.text
    logger.info('user_data: %s', context.user_data)
    update.message.reply_text(
        text='–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞.\n–ü—Ä–∏–º–µ—Ä: –∫–∞—Ä—Ç–∞ —Å–±–µ—Ä–±–∞–Ω–∫–∞ 1111 2222 3333 4444 –ª–∏–±–æ Paypal paypal@mail.ru –ª–∏–±–æ –Ω–∞ —Å–∞–π—Ç–µ www.fund.ru/donate',
        parse_mode=ParseMode.HTML,
    )
    return METHOD_0

@debug_request
def method_0_handler(update: Update, context: CallbackContext):
    context.user_data[METHOD_0] = update.message.text
    context.user_data[N_FOUNDS] = 1
    logger.info('user_data: %s', context.user_data)
    update.message.reply_text(
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –ï—Å–ª–∏ –æ–¥–Ω–æ–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–º–∏—Ç–µ /skip",
        )
    return FOUNDATION_1

@debug_request
def foundation_1_handler(update: Update, context: CallbackContext):
    context.user_data[FOUNDATION_1] = update.message.text
    logger.info('user_data: %s', context.user_data)
    update.message.reply_text(
        text='–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞\n–ü—Ä–∏–º–µ—Ä: –∫–∞—Ä—Ç–∞ —Å–±–µ—Ä–±–∞–Ω–∫–∞ 1111 2222 3333 4444 –ª–∏–±–æ Paypal paypal@mail.ru –ª–∏–±–æ –Ω–∞ —Å–∞–π—Ç–µ www.fund.ru/donate',
        parse_mode=ParseMode.HTML,
    )
    return METHOD_1

@debug_request
def method_1_handler(update: Update, context: CallbackContext):
    context.user_data[METHOD_1] = update.message.text
    context.user_data[N_FOUNDS] = 2
    logger.info('user_data: %s', context.user_data)
    update.message.reply_text(
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–π –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –ï—Å–ª–∏ –¥–≤—É—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–º–∏—Ç–µ /skip",
    )
    return FOUNDATION_2

@debug_request
def foundation_2_handler(update: Update, context: CallbackContext):
    context.user_data[FOUNDATION_2] = update.message.text
    logger.info('user_data: %s', context.user_data)
    update.message.reply_text(
        text='–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞\n–ü—Ä–∏–º–µ—Ä: –∫–∞—Ä—Ç–∞ —Å–±–µ—Ä–±–∞–Ω–∫–∞ 1111 2222 3333 4444 –ª–∏–±–æ Paypal paypal@mail.ru –ª–∏–±–æ –Ω–∞ —Å–∞–π—Ç–µ www.fund.ru/donate',
        parse_mode=ParseMode.HTML,
    )
    return METHOD_2

@debug_request
def method_2_handler(update: Update, context: CallbackContext):
    context.user_data[METHOD_2] = update.message.text
    context.user_data[N_FOUNDS] = 3
    logger.info('user_data: %s', context.user_data)
    update.message.reply_text(
        text=f'''
–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å. –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞—à–∏ –¥—Ä—É–∑—å—è —É–≤–∏–¥—è—Ç –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤—è—Ç –≤–∞–º –æ—Ç–∫—Ä—ã—Ç–∫—É.
–ü—Ä–∏–º–µ—Ä:
–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ. –í—ã –∫–ª–∞—Å—Å–Ω—ã–µ. –í–∞—à –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ü§ç''',
        parse_mode=ParseMode.HTML,
    )

    return THANKS_SPEECH

@debug_request
def skip(update: Update, context: CallbackContext) -> int:
    logger.info("User %s wants to skip other funds.", context.user_data)
    update.message.reply_text(
        text=f'''
–í–≤–æ–¥ –æ—Ä–∞–Ω–∏–∑–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω
–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å. –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞—à–∏ –¥—Ä—É–∑—å—è —É–≤–∏–¥—è—Ç –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤—è—Ç –≤–∞–º –æ—Ç–∫—Ä—ã—Ç–∫—É.
–ü—Ä–∏–º–µ—Ä:
–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ. –í—ã –∫–ª–∞—Å—Å–Ω—ã–µ. –í–∞—à –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ü§ç
''',
        parse_mode=ParseMode.HTML
    )
    return THANKS_SPEECH

def thanks_speech_handler(update: Update, context: CallbackContext) -> int:
    context.user_data[THANKS_SPEECH] = update.message.text
    name = context.user_data[NAME]
    n_founds = context.user_data[N_FOUNDS]
    logger.info("User %s wants to skip other funds.", context.user_data)
    keyboard = [[KeyboardButton(BUTTON_SAVE_WISHLIST)]]
    welcome_speech = context.user_data[WELCOME_SPEECH]
    thanks_speech = context.user_data[THANKS_SPEECH]
    foundation0 = context.user_data[FOUNDATION_0]
    method0 = context.user_data[METHOD_0]
    if n_founds == 1:
        reply_text = print_1_fund(name, welcome_speech, foundation0, method0, thanks_speech)
    if n_founds == 2:
        foundation1 = context.user_data[FOUNDATION_1]
        method1 = context.user_data[METHOD_1]
        reply_text = print_2_funds(name, welcome_speech, foundation0, method0, foundation1, method1, thanks_speech)
    if n_founds == 3:
        foundation1 = context.user_data[FOUNDATION_1]
        method1 = context.user_data[METHOD_1]
        foundation2 = context.user_data[FOUNDATION_2]
        method2 = context.user_data[METHOD_2]
        reply_text = print_3_funds(name, welcome_speech, foundation0, method0, foundation1, method1, foundation2, method2, thanks_speech)
    update.message.reply_text(
        text=f"{reply_text}\n–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ <b>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏—à–ª–∏—Å—Ç</b>. –î–ª—è –æ—Ç–º–µ–Ω—ã - /cancel",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True),
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )

    return CONFIRM

@debug_request
def finish_creating_handler(update: Update, context: CallbackContext):
    user = update.effective_user
    name = context.user_data[NAME]
    foundation0 = context.user_data[FOUNDATION_0]
    method0 = context.user_data[METHOD_0]
    n_founds = context.user_data[N_FOUNDS]
    welcome_speech = context.user_data[WELCOME_SPEECH]
    thanks_speech = context.user_data[THANKS_SPEECH]
    if n_founds == 1:
        foundation1 = 'None'
        method1 = 'None'
        foundation2 = 'None'
        method2 = 'None'
    if n_founds == 2:
        foundation1 = context.user_data[FOUNDATION_1]
        method1 = context.user_data[METHOD_1]
        foundation2 = 'None'
        method2 = 'None'
    if n_founds == 3:
        foundation1 = context.user_data[FOUNDATION_1]
        method1 = context.user_data[METHOD_1]
        foundation2 = context.user_data[FOUNDATION_2]
        method2 = context.user_data[METHOD_2]
    if name:
        if foundation0:
            if method0:
                add_message(
                    user_id=user.id,
                    name=name,
                    namelowreg=name.lower(),
                    welcome_speech=welcome_speech,
                    foundation0=foundation0,
                    method0=method0,
                    foundation1=foundation1,
                    method1=method1,
                    foundation2=foundation2,
                    method2=method2,
                    thanks_speech=thanks_speech,
                    n_founds=n_founds
                )
    update.message.reply_text(
        text=f'–í–∏—à–ª–∏—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω‚úîÔ∏è.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏–º –¥—Ä—É–∑—å—è–º —Ç–µ–≥ #{name}, –∏ –æ–Ω–∏ —Å–º–æ–≥—É—Ç —Å –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–∞–π—Ç–∏ –≤–∞—à –≤–∏—à–ª–∏—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –æ—Ç–∫—Ä—ã—Ç–∫—É',
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.HTML
    )
    logger.info('user_data: %s', context.user_data)
    return ConversationHandler.END

@debug_request
def cancel_handler(update: Update, context: CallbackContext) -> int:
    logger.info("User %s canceled the conversation.", context.user_data)
    update.message.reply_text(
        text='–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—à–ª–∏—Å—Ç–∞. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∂–º–∏—Ç–µ /start',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

@debug_request
def about(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton(BUTTON1_FIND, callback_data=CALLBACK_BUTTON1_FIND)],
        [InlineKeyboardButton(BUTTON2_MAKE, callback_data=CALLBACK_BUTTON2_MAKE)],
        [InlineKeyboardButton(BUTTON3_SHOW, callback_data=CALLBACK_BUTTON3_SHOW)],
    ]
    update.message.reply_text(
        text='''
*–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ ¬´–í–º–µ—Å—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∫–∏¬ª:*

–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –≤–∏—à–ª–∏—Å—Ç: —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –≤ –æ–¥–Ω—É –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤–∞—à–∏ –¥—Ä—É–∑—å—è –º–æ–≥—É—Ç —Å–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥–∞—Ä–∫–∞ –≤–∞–º.
–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –≤–∏—à–ª–∏—Å—Ç –≤ –∫—Ä–∞—Å–∏–≤–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º –∏ –¥—Ä—É–≥–∏–µ —Å–æ—Ü—Å–µ—Ç–∏.
–¢–∞–∫–∂–µ –±–æ—Ç –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤–∏—à–ª–∏—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–∫—Ä—ã—Ç–∫—É –∞–≤—Ç–æ—Ä—É –≤–∏—à–ª–∏—Å—Ç–∞. –û—Ç–∫—Ä—ã—Ç–∫—É –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∞–Ω–æ–Ω–∏–º–Ω–æ —Ç–∞–∫ –∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.

–ë–æ—Ç –Ω–µ —Ö—Ä–∞–Ω–∏—Ç –Ω–∏–∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è—Ö –æ—Ç–∫—Ä—ã—Ç–æ–∫. –ö–æ–≥–¥–∞ –≤—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Ç–≤—É–µ—Ç–µ —Å —á—å–∏–º-—Ç–æ –≤–∏—à–ª–∏—Å—Ç–æ–º –≤–∞—à–µ –∏–º—è –Ω–∏–≥–¥–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è. –ò–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –¥–∞–∂–µ –∞–≤—Ç–æ—Ä—ã –±–æ—Ç–∞ –Ω–µ –º–æ–≥—É—Ç —É–∑–Ω–∞—Ç—å –∫–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∫–∏.

–•—É–¥–æ–∂–Ω–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∫–∏ [66hellena66](https://www.instagram.com/66hellena66/)
–•—É–¥–æ–∂–Ω–∏–∫ –∞–≤–∞—Ç–∞—Ä–∫–∏ [–°—Ç—É–¥–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –°—Ç–∞–Ω–∏—Å–ª–∞–≤–∞ –ì–æ—Ä–∞](http://logotype.su)
–¢–µ–ª–µ–≥—Ä–∞–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ - [@neverending_why](@neverending_why). –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –µ—Å–ª–∏ —É–≤–∏–¥–µ–ª–∏ –æ—à–∏–±–∫—É –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ —É–ª—É—á—à–∏—Ç—å –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞. –ú—ã —Ä–∞–¥—ã –ª—é–±—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –∏ –∑–∞–º–µ—á–∞–Ω–∏—è–º.ü§ç

*–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:*
''',
        reply_markup=InlineKeyboardMarkup(keyboard, one_time_keyboard=True),
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True
    )


def main():
    logger.info('Start bot')
    req = Request(
        connect_timeout=0.5,
        read_timeout=1.0,
    )
    bot = Bot(
        token=TG_TOKEN,
        request=req,
    )
    updater = Updater(
        bot=bot,
        use_context=True,
    )
    info = bot.get_me()
    logger.info(f'Bot info {info}')

    init_db()

    conv_create_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(do_create, pass_user_data=True),
        ],
        states={
            NAME: [
                MessageHandler(Filters.text, name_handler, pass_user_data=True),
            ],
            WELCOME_SPEECH: [
                MessageHandler(Filters.text, welcome_speech_handler, pass_user_data=True),
            ],
            FOUNDATION_0: [
                MessageHandler(Filters.text, foundation_0_handler, pass_user_data=True),
            ],
            METHOD_0: [
                MessageHandler(Filters.text, method_0_handler, pass_user_data=True),
            ],
            FOUNDATION_1: [
                MessageHandler(Filters.text, foundation_1_handler, pass_user_data=True),
                CommandHandler('skip', skip),
            ],
            METHOD_1: [
                MessageHandler(Filters.text, method_1_handler, pass_user_data=True),
            ],
            FOUNDATION_2: [
                MessageHandler(Filters.text, foundation_2_handler, pass_user_data=True),
                CommandHandler('skip', skip),
            ],
            METHOD_2: [
                MessageHandler(Filters.text, method_2_handler, pass_user_data=True),
            ],
            THANKS_SPEECH: [
                MessageHandler(Filters.text, thanks_speech_handler, pass_user_data=True),
            ],
            CONFIRM: [
                MessageHandler(Filters.text, finish_creating_handler, pass_user_data=True),
            ]
        },
        fallbacks=[
            CommandHandler('cancel', cancel_handler),
        ],
    )

    updater.dispatcher.add_handler(conv_create_handler)
    updater.dispatcher.add_handler(CommandHandler('start', start_buttons_handler))
    updater.dispatcher.add_handler(CommandHandler('about', about))
    updater.dispatcher.add_handler(MessageHandler(Filters.text, message_handler))
    updater.dispatcher.add_handler(MessageHandler(Filters.photo, photo_handler))

    updater.start_polling()
    updater.idle()
    logger.info('Stop bot')

if __name__ == '__main__':
    main()
