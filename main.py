from telegram import Bot,  ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler
from telegram.ext import ConversationHandler
from telegram.utils.request import Request
from db import *
import os
from appearance_funtions import *
from telegram import InputMediaPhoto, InputFile

from admin_functions import *
from pic_config import PIC_INFO, PIC_FOLDER, PICTURE_NAMES_DEMO

logger = getLogger(__name__)

NAME = 0
CONFIRM = 1
WELCOME_SPEECH = 2
FOUNDATION_0 = 3
METHOD_0 = 4
FOUNDATION_1 = 5
METHOD_1 = 6
FOUNDATION_2 = 7
METHOD_2 = 8
N_FOUNDS = 9
THANKS_SPEECH = 10
WISH = 11
FROM_WHOM = 12
FOUND_WISHLIST = 13
WISH_MODE = 14
FROM_MODE = 15
PIC_NUM = 16
DELETE_MODE = 17
REPLY_MODE = 18
REPLY_USER = 19
REPLY_WISHLIST = 20


@debug_request
def start_buttons_handler(update: Update, context: CallbackContext):
    context.user_data[WISH_MODE] = 'False'
    context.user_data[FROM_MODE] = 'False'
    context.user_data[DELETE_MODE] = 'False'
    context.user_data[REPLY_MODE] = 'False'
    chat_id = update.message.chat.id
    logger.info(f'chat_id {chat_id} started conversation')
    user_id_df = pd.read_csv(USER_IDS_FILE, index_col=0)
    if chat_id not in user_id_df.user_id.values:
        user_id_df = pd.concat([user_id_df,
                   pd.DataFrame([{'user_id': chat_id}])], ignore_index=True)
        user_id_df.to_csv(USER_IDS_FILE)
        logger.info(f'added to file of unique users chat_id {chat_id}')
    keyboard = [
        [InlineKeyboardButton(BUTTON1_FIND, callback_data=CALLBACK_BUTTON1_FIND)],
        [InlineKeyboardButton(BUTTON2_MAKE, callback_data=CALLBACK_BUTTON2_MAKE)],
        [InlineKeyboardButton(BUTTON3_SHOW, callback_data=CALLBACK_BUTTON3_SHOW)],
    ]
    update.message.reply_text(
        text='''
*–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç ¬´–í–º–µ—Å—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∫–∏¬ª*

–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –≤–∏—à–ª–∏—Å—Ç: —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –≤ –æ–¥–Ω—É –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤–∞—à–∏ –¥—Ä—É–∑—å—è –º–æ–≥—É—Ç —Å–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥–∞—Ä–∫–∞ –≤–∞–º.
–¢–∞–∫–∂–µ –±–æ—Ç –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤–∏—à–ª–∏—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–∫—Ä—ã—Ç–∫—É –∞–≤—Ç–æ—Ä—É –≤–∏—à–ª–∏—Å—Ç–∞. 

–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ - /about
*–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:*''',
        reply_markup=InlineKeyboardMarkup(keyboard, one_time_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return ConversationHandler.END

@debug_request
def do_create(update: Update, context: CallbackContext):
    init = update.callback_query.data
    chat_id = update.callback_query.message.chat.id
    if init == CALLBACK_BUTTON1_FIND:
        context.user_data[WISH_MODE] = 'False'
        context.user_data[FROM_MODE] = 'False'
        context.user_data[DELETE_MODE] = 'False'
        context.user_data[REPLY_MODE] = 'False'
        logger.info(f'chat_id {chat_id} wants to find wishlist')
        update.callback_query.bot.send_message(
            chat_id=chat_id,
            text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏—à–ª–∏—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è –∑–Ω–∞–∫ #\n\n–ø—Ä–∏–º–µ—Ä #–î–µ–Ω—å–†–æ–∂–¥–µ–Ω–∏—è–ò–≤–∞–Ω–∞–ò–≤–∞–Ω–æ–≤–∞01–Ø–Ω–≤2021',
            reply_markup=ReplyKeyboardRemove()
        )

    if init == CALLBACK_BUTTON3_SHOW:
        context.user_data[WISH_MODE] = 'False'
        context.user_data[FROM_MODE] = 'False'
        context.user_data[DELETE_MODE] = 'False'
        context.user_data[REPLY_MODE] = 'False'
        logger.info(f'chat_id {chat_id} wants to see its wishlists')
        wishlists = show_my_wishlists(user_id=chat_id, limit=10)
        if len(wishlists) == 0:
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text='–ü–æ–∫–∞ —É –≤–∞—Å –Ω–µ—Ç –≤–∏—à–ª–∏—Å—Ç–æ–≤. –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —á–µ–π-—Ç–æ –≤–∏—à–ª–∏—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –≤–∞—à –ø–µ—Ä–≤—ã–π –≤–∏—à–ª–∏—Å—Ç –Ω–∞–∂–º–∏—Ç–µ /start',
                reply_markup=ReplyKeyboardRemove()

            )
        else:
            keyboard = [
                [InlineKeyboardButton(BUTTON10_DELETE_WISHLIST, callback_data=CALLBACK_BUTTON10_DELETE_WISHLIST)],
            ]
            for wishlist_i in wishlists:
                n_founds = wishlist_i[10]
                welcome_speech = wishlist_i[2]
                name = wishlist_i[1]
                foundation0 = wishlist_i[3]
                foundation1 = wishlist_i[5]
                foundation2 = wishlist_i[7]
                wishlist_pic_name = print_wishlist_as_a_picture(n_founds, welcome_speech, name, foundation0, foundation1, foundation2, chat_id, picstyle='dark')
                update.callback_query.bot.send_message(
                    chat_id=chat_id,
                    text=name
                )
                update.callback_query.bot.sendPhoto(
                    chat_id=chat_id,
                    photo=open(wishlist_pic_name, 'rb'),
                )
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text='''
–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π –≤–∏—à–ª–∏—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–∂–º–∏—Ç–µ /start 
–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö –≤–∏—à–ª–∏—Å—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –£–î–ê–õ–ò–¢–¨ –í–ò–®–õ–ò–°–¢''',
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup(keyboard, one_time_keyboard=True),
            )
            os.system(f"(rm -rf {PIC_FOLDER + '*_' + str(chat_id) + '_' + PIC_INFO['4']['pic_name']})")
            os.system(f"(rm -rf {PIC_FOLDER + '*_' + str(chat_id) + '_' + PIC_INFO['5']['pic_name']})")
            os.system(f"(rm -rf {PIC_FOLDER + '*_' + str(chat_id) + '_' + PIC_INFO['6']['pic_name']})")
            logger.info(f'all temporary data for {chat_id} was successfully deleted')

    if init == CALLBACK_BUTTON2_MAKE:
        context.user_data[WISH_MODE] = 'False'
        context.user_data[FROM_MODE] = 'False'
        context.user_data[DELETE_MODE] = 'False'
        context.user_data[REPLY_MODE] = 'False'
        logger.info(f'{chat_id} started making wishlist')
        update.callback_query.bot.send_message(
            chat_id=chat_id,
            text='''
<b>–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –≤–∏—à–ª–∏—Å—Ç–∞.</b>
–û–¥–Ω–æ —Å–ª–æ–≤–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤. –ü—Ä–∏–º–µ—Ä –î–µ–Ω—å–†–æ–∂–¥–µ–Ω–∏—è–ò–≤–∞–Ω–∞–ò–≤–∞–Ω–æ–≤–∞01–Ø–Ω–≤2021

–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—à–ª–∏—Å—Ç–∞ - /cancel''',
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.HTML
        )
        return NAME

    if init == CALLBACK_BUTTON4_GENERATE_POSTCARD:
        context.user_data[WISH_MODE] = 'False'
        context.user_data[FROM_MODE] = 'False'
        context.user_data[DELETE_MODE] = 'False'
        context.user_data[REPLY_MODE] = 'False'
        try:
            found_wishlist = context.user_data[FOUND_WISHLIST]
            logger.info(f'{chat_id} started generating postcard for wishlist {found_wishlist}')
            keyboard = [
                [InlineKeyboardButton(BUTTON_PIC0, callback_data=CALLBACK_BUTTON_PIC0),
                 InlineKeyboardButton(BUTTON_PIC1, callback_data=CALLBACK_BUTTON_PIC1)],
                [InlineKeyboardButton(BUTTON_PIC2, callback_data=CALLBACK_BUTTON_PIC2),
                 InlineKeyboardButton(BUTTON_PIC3, callback_data=CALLBACK_BUTTON_PIC3)]
            ]
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text=f'<b>–í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ! –î–∞–≤–∞–π—Ç–µ –ø–æ—Ä–∞–¥—É–µ–º –∞–≤—Ç–æ—Ä–∞ –≤–∏—à–ª–∏—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –µ–º—É –æ—Ç–∫—Ä—ã—Ç–∫—É!</b>',
                parse_mode=ParseMode.HTML
            )
            message_to_del = context.bot.send_message(
                chat_id=chat_id,
                text='‚è≥–ì–æ—Ç–æ–≤–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–∫—Ä—ã—Ç–æ–∫...',
            )
            context.bot.sendPhoto(
                chat_id=chat_id,
                photo=open(PIC_FOLDER + PICTURE_NAMES_DEMO[0], 'rb'),
            )
            delete_flag = 0
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text=f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –æ—Ç–∫—Ä—ã—Ç–∫–∏',
                reply_markup=InlineKeyboardMarkup(keyboard, one_time_keyboard=True),
                parse_mode=ParseMode.HTML
            )
            delete_flag = 1
            if delete_flag == 1:
                context.bot.delete_message(
                    chat_id=chat_id,
                    message_id=message_to_del.message_id
                )
        except:
            logger.info(f'{chat_id} started generating postcard but no wishlist in ram')
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text='–ö–∞–∂–µ—Ç—Å—è –º—ã —Å–ª–∏—à–∫–æ–º –¥–∞–≤–Ω–æ –Ω–µ –æ–±—â–∞–ª–∏—Å—åüòî –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —è –∑–∞–±—ã–ª –æ —á–µ–º –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞'
            )

    if init == CALLBACK_BUTTON_PIC0:
        context.user_data[WISH_MODE] = 'True'
        context.user_data[FROM_MODE] = 'False'
        context.user_data[DELETE_MODE] = 'False'
        context.user_data[REPLY_MODE] = 'False'
        context.user_data[PIC_NUM] = 0
        logger.info(f'{chat_id} choose pic0')
        try:
            found_wishlist = context.user_data[FOUND_WISHLIST]
            WISH_LIMIT = PIC_INFO['0']['lenths_wish'][-1]
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–µ (–¥–æ {WISH_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤) –ø–æ–∂–µ–ª–∞–Ω–∏–µ\n–Ω–∞–ø—Ä–∏–º–µ—Ä: –°—á–∞—Å—Ç—å—è –∑–¥–æ—Ä–æ–≤—å—è',
                parse_mode=ParseMode.HTML
            )
        except:
            logger.info(f'{chat_id} started chose pic0 but no wishlist in ram')
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text='–ö–∞–∂–µ—Ç—Å—è –º—ã —Å–ª–∏—à–∫–æ–º –¥–∞–≤–Ω–æ –Ω–µ –æ–±—â–∞–ª–∏—Å—åüòî –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —è –∑–∞–±—ã–ª –æ —á–µ–º –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞'
            )


    if init == CALLBACK_BUTTON_PIC1:
        context.user_data[WISH_MODE] = 'True'
        context.user_data[FROM_MODE] = 'False'
        context.user_data[DELETE_MODE] = 'False'
        context.user_data[REPLY_MODE] = 'False'
        context.user_data[PIC_NUM] = 1
        logger.info(f'{chat_id} choose pic1')
        try:
            found_wishlist = context.user_data[FOUND_WISHLIST]
            WISH_LIMIT = PIC_INFO['1']['lenths_wish'][-1]
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–µ (–¥–æ {WISH_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤) –ø–æ–∂–µ–ª–∞–Ω–∏–µ\n–Ω–∞–ø—Ä–∏–º–µ—Ä: –°—á–∞—Å—Ç—å—è –∑–¥–æ—Ä–æ–≤—å—è',
                parse_mode=ParseMode.HTML
            )
        except:
            logger.info(f'{chat_id} started chose pic1 but no wishlist in ram')
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text='–ö–∞–∂–µ—Ç—Å—è –º—ã —Å–ª–∏—à–∫–æ–º –¥–∞–≤–Ω–æ –Ω–µ –æ–±—â–∞–ª–∏—Å—åüòî –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —è –∑–∞–±—ã–ª –æ —á–µ–º –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞'
            )

    if init == CALLBACK_BUTTON_PIC2:
        context.user_data[WISH_MODE] = 'True'
        context.user_data[FROM_MODE] = 'False'
        context.user_data[DELETE_MODE] = 'False'
        context.user_data[REPLY_MODE] = 'False'
        context.user_data[PIC_NUM] = 2
        logger.info(f'{chat_id} choose pic2')
        try:
            found_wishlist = context.user_data[FOUND_WISHLIST]
            WISH_LIMIT = PIC_INFO['2']['lenths_wish'][-1]
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–µ (–¥–æ {WISH_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤) –ø–æ–∂–µ–ª–∞–Ω–∏–µ\n–Ω–∞–ø—Ä–∏–º–µ—Ä: –°—á–∞—Å—Ç—å—è –∑–¥–æ—Ä–æ–≤—å—è',
                parse_mode=ParseMode.HTML
            )
        except:
            logger.info(f'{chat_id} started chose pic2 but no wishlist in ram')
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text='–ö–∞–∂–µ—Ç—Å—è –º—ã —Å–ª–∏—à–∫–æ–º –¥–∞–≤–Ω–æ –Ω–µ –æ–±—â–∞–ª–∏—Å—åüòî –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —è –∑–∞–±—ã–ª –æ —á–µ–º –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞'
            )

    if init == CALLBACK_BUTTON_PIC3:
        context.user_data[WISH_MODE] = 'True'
        context.user_data[FROM_MODE] = 'False'
        context.user_data[DELETE_MODE] = 'False'
        context.user_data[REPLY_MODE] = 'False'
        context.user_data[PIC_NUM] = 3
        logger.info(f'{chat_id} choose pic3')
        try:
            found_wishlist = context.user_data[FOUND_WISHLIST]
            WISH_LIMIT = PIC_INFO['3']['lenths_wish'][-1]
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–µ (–¥–æ {WISH_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤) –ø–æ–∂–µ–ª–∞–Ω–∏–µ\n–Ω–∞–ø—Ä–∏–º–µ—Ä: –°—á–∞—Å—Ç—å—è –∑–¥–æ—Ä–æ–≤—å—è',
                parse_mode=ParseMode.HTML
            )
        except:
            logger.info(f'{chat_id} started chose pic3 but no wishlist in ram')
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text='–ö–∞–∂–µ—Ç—Å—è –º—ã —Å–ª–∏—à–∫–æ–º –¥–∞–≤–Ω–æ –Ω–µ –æ–±—â–∞–ª–∏—Å—åüòî –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —è –∑–∞–±—ã–ª –æ —á–µ–º –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞'
            )

    #if init == CALLBACK_BUTTON_8MARCH_PIC1:
    #    context.user_data[WISH_MODE] = 'True'
    #    context.user_data[FROM_MODE] = 'False'
    #    context.user_data[DELETE_MODE] = 'False'
    #    context.user_data[PIC_NUM] = 2
    #    logger.info(f'{chat_id} choose 8 march pic1')
    #    update.callback_query.bot.send_message(
    #        chat_id=chat_id,
    #        text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–µ (–¥–æ {WISH_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤) –ø–æ–∂–µ–ª–∞–Ω–∏–µ\n–Ω–∞–ø—Ä–∏–º–µ—Ä: –°—á–∞—Å—Ç—å—è –∑–¥–æ—Ä–æ–≤—å—è',
    #        parse_mode=ParseMode.HTML
    #    )

    #if init == CALLBACK_BUTTON_8MARCH_PIC2:
    #    context.user_data[WISH_MODE] = 'True'
    #    context.user_data[FROM_MODE] = 'False'
    #    context.user_data[DELETE_MODE] = 'False'
    #    context.user_data[PIC_NUM] = 3
    #    logger.info(f'{chat_id} choose 8 march pic2')
    #    update.callback_query.bot.send_message(
    #        chat_id=chat_id,
    #        text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–µ (–¥–æ {WISH_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤) –ø–æ–∂–µ–ª–∞–Ω–∏–µ\n–Ω–∞–ø—Ä–∏–º–µ—Ä: –°—á–∞—Å—Ç—å—è –∑–¥–æ—Ä–æ–≤—å—è',
    #        parse_mode=ParseMode.HTML
    #    )

    if init == CALLBACK_BUTTON6_ADD_NAME:
        context.user_data[WISH_MODE] = 'False'
        context.user_data[FROM_MODE] = 'True'
        context.user_data[DELETE_MODE] = 'False'
        context.user_data[REPLY_MODE] = 'False'
        logger.info(f'{chat_id} writing from')
        try:
            found_wishlist = context.user_data[FOUND_WISHLIST]
            pic_num = context.user_data[PIC_NUM]
            wish = context.user_data[WISH]
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text='–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–¥–ø–∏—Å—å\n–Ω–∞–ø—Ä–∏–º–µ—Ä: O—Ç —Ç–≤–æ–µ–π –ª—É—á—à–µ–π –ø–æ–¥—Ä—É–≥–∏',
                parse_mode=ParseMode.HTML
            )
        except:
            logger.info(f'{chat_id} started chose writing from but no wishlist in ram')
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text='–ö–∞–∂–µ—Ç—Å—è –º—ã —Å–ª–∏—à–∫–æ–º –¥–∞–≤–Ω–æ –Ω–µ –æ–±—â–∞–ª–∏—Å—åüòî –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —è –∑–∞–±—ã–ª –æ —á–µ–º –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞'
            )

    elif init == CALLBACK_BUTTON5_ANONYMOUS_SEND:
        context.user_data[FROM_MODE] = 'False'
        context.user_data[WISH_MODE] = 'False'
        context.user_data[DELETE_MODE] = 'False'
        context.user_data[REPLY_MODE] = 'False'
        logger.info(f'{chat_id} chose anonymous sending')
        try:
            found_wishlist = context.user_data[FOUND_WISHLIST]
            pic_num = context.user_data[PIC_NUM]
            wish = context.user_data[WISH]
            keyboard = [
                [InlineKeyboardButton(BUTTON7_ADD_SCREENSHOT, callback_data=CALLBACK_BUTTON7_ADD_SCREENSHOT)],
                [InlineKeyboardButton(BUTTON8_NO_SCREENSHOT, callback_data=CALLBACK_BUTTON8_NO_SCREENSHOT)]
            ]
            pic_name = PIC_FOLDER+'wish_'+str(chat_id)+'_'+PIC_INFO[str(context.user_data[PIC_NUM])]['pic_name']
            update.callback_query.bot.sendPhoto(
                chat_id=chat_id,
                photo=open(pic_name, 'rb'),
            )
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text=f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∫—Ä—ã—Ç–∫–∏ ‚¨ÜÔ∏è \n(–í–∞—à–∞ –æ—Ç–∫—Ä—ã—Ç–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ)",
                reply_markup=InlineKeyboardMarkup(keyboard, one_time_keyboard=True),
            )
        except:
            logger.info(f'{chat_id} started chose anonymos send but no wishlist in ram')
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text='–ö–∞–∂–µ—Ç—Å—è –º—ã —Å–ª–∏—à–∫–æ–º –¥–∞–≤–Ω–æ –Ω–µ –æ–±—â–∞–ª–∏—Å—åüòî –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —è –∑–∞–±—ã–ª –æ —á–µ–º –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞'
            )

    elif init == CALLBACK_BUTTON7_ADD_SCREENSHOT:
        context.user_data[FROM_MODE] = 'False'
        context.user_data[WISH_MODE] = 'False'
        context.user_data[DELETE_MODE] = 'False'
        context.user_data[REPLY_MODE] = 'False'
        logger.info(f'{chat_id} sending screenshot')
        try:
            found_wishlist = context.user_data[FOUND_WISHLIST]
            pic_num = context.user_data[PIC_NUM]
            wish = context.user_data[WISH]
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text='–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.'
            )
        except:
            logger.info(f'{chat_id} started tries to add screenshot but no wishlist in ram')
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text='–ö–∞–∂–µ—Ç—Å—è –º—ã —Å–ª–∏—à–∫–æ–º –¥–∞–≤–Ω–æ –Ω–µ –æ–±—â–∞–ª–∏—Å—åüòî –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —è –∑–∞–±—ã–ª –æ —á–µ–º –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞'
            )

    elif init == CALLBACK_BUTTON8_NO_SCREENSHOT:
        context.user_data[WISH_MODE] = 'False'
        context.user_data[FROM_MODE] = 'False'
        context.user_data[DELETE_MODE] = 'False'
        context.user_data[REPLY_MODE] = 'False'
        logger.info(f'{chat_id} chose no screenshot')
        try:
            wishlist = find_wishlist(namelowreg=(context.user_data[FOUND_WISHLIST]).lower(), limit=1)
            wishlist_author_user_id = wishlist[0][0]
            wishlist_thanks_message = wishlist[0][9]
            bot = update.callback_query.bot
            if os.path.exists(PIC_FOLDER+'from_'+str(chat_id)+'_'+PIC_INFO[str(context.user_data[PIC_NUM])]['pic_name']):
                pic_name = PIC_FOLDER+'from_'+str(chat_id)+'_'+PIC_INFO[str(context.user_data[PIC_NUM])]['pic_name']
            else:
                pic_name = PIC_FOLDER+'wish_'+str(chat_id)+'_'+PIC_INFO[str(context.user_data[PIC_NUM])]['pic_name']
            bot.send_message(
                chat_id=wishlist_author_user_id,
                text=f'üíå –í–ê–ú –ù–û–í–ê–Ø –û–¢–ö–†–´–¢–ö–ê!üíå \n\n\n',
            )
            callback_button_name = 'callback_button_reply|'+str(chat_id)+'|'+str(datetime.datetime.now())[:19]
            logger.info(f'PLACE {callback_button_name}')
            reply_buttons_df = pd.read_csv(REPLY_BUTTONS_FILE, index_col=0)
            reply_buttons_df = pd.concat([reply_buttons_df, pd.DataFrame([{'callback_button_name': callback_button_name, 'wishlist': wishlist[0][1]}])], ignore_index=True)
            reply_buttons_df.to_csv(REPLY_BUTTONS_FILE)
            logger.info(f'button {callback_button_name} added to file of reply buttons chat_id')
            keyboard = [[InlineKeyboardButton(BUTTON11_REPLY_TO_POSTCARD, callback_data=callback_button_name)]]
            bot.sendPhoto(
                chat_id=wishlist_author_user_id,
                photo=open(pic_name, 'rb'),
                reply_markup=InlineKeyboardMarkup(keyboard, one_time_keyboard=True),
            )
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text=f'''
üì§ –í–∞—à–∞ –æ—Ç–∫—Ä—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ—Ä—É –≤–∏—à–ª–∏—Å—Ç–∞ üì§ \n\n
–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–≤—Ç–æ—Ä–∞ –≤–∏—à–ª–∏—Å—Ç–∞: <b>{wishlist_thanks_message}</b>\n
–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º.
–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π –≤–∏—à–ª–∏—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –Ω–∞–∂–º–∏—Ç–µ /start''',
                reply_markup=ReplyKeyboardRemove(),
                parse_mode=ParseMode.HTML
            )
            logger.info(f'{chat_id} successfully sent postcard to user {wishlist_author_user_id}')
            os.system(f"(rm -rf {PIC_FOLDER + 'screen_' + str(chat_id) + '.png'})")
            os.system(f"(rm -rf {PIC_FOLDER + 'from_' + str(chat_id) + '_' + PIC_INFO[str(context.user_data[PIC_NUM])]['pic_name']})")
            os.system(f"(rm -rf {PIC_FOLDER + 'wish_' + str(chat_id) + '_' + PIC_INFO[str(context.user_data[PIC_NUM])]['pic_name']})")
            logger.info(f'all temporary data for {chat_id} was successfully deleted')
        except:
            logger.info(f'{chat_id} wants to send without screenshot but error occured')
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üòî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞'
            )

    elif init == CALLBACK_BUTTON9_READY:
        context.user_data[FROM_MODE] = 'False'
        context.user_data[WISH_MODE] = 'False'
        context.user_data[DELETE_MODE] = 'False'
        context.user_data[REPLY_MODE] = 'False'
        try:
            wishlist = find_wishlist(namelowreg=(context.user_data[FOUND_WISHLIST]).lower(), limit=1)
            wishlist_author_user_id = wishlist[0][0]
            wishlist_thanks_message = wishlist[0][9]
            if os.path.exists(PIC_FOLDER+'from_'+str(chat_id)+'_'+PIC_INFO[str(context.user_data[PIC_NUM])]['pic_name']):
                pic_name = PIC_FOLDER+'from_'+str(chat_id)+'_'+PIC_INFO[str(context.user_data[PIC_NUM])]['pic_name']
            else:
                pic_name = PIC_FOLDER+'wish_'+str(chat_id)+'_'+PIC_INFO[str(context.user_data[PIC_NUM])]['pic_name']
            bot = update.callback_query.bot
            callback_button_name = 'callback_button_reply|' + str(chat_id) + '|' + str(datetime.datetime.now())[:19]
            reply_buttons_df = pd.read_csv(REPLY_BUTTONS_FILE, index_col=0)
            reply_buttons_df = pd.concat([reply_buttons_df, pd.DataFrame([{'callback_button_name': callback_button_name, 'wishlist': wishlist[0][1]}])], ignore_index=True)
            reply_buttons_df.to_csv(REPLY_BUTTONS_FILE)
            logger.info(f'button {callback_button_name} added to file of reply buttons chat_id')
            keyboard = [[InlineKeyboardButton(BUTTON11_REPLY_TO_POSTCARD, callback_data=callback_button_name)]]
            bot.send_message(
                chat_id=wishlist_author_user_id,
                text=f'üíå –í–ê–ú –ù–û–í–ê–Ø –û–¢–ö–†–´–¢–ö–ê!üíå \n\n\n',
            )
            bot.sendPhoto(
                chat_id=wishlist_author_user_id,
                photo=open(pic_name, 'rb'),
            )
            bot.sendPhoto(
                chat_id=wishlist_author_user_id,
                photo=open(PIC_FOLDER+'screen_' + str(chat_id) + '.png', 'rb'),
                reply_markup=InlineKeyboardMarkup(keyboard, one_time_keyboard=True),
            )
            bot.send_message(
                chat_id=chat_id,
                text=f'''
üì§ –í–∞—à–∞ –æ—Ç–∫—Ä—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ—Ä—É –≤–∏—à–ª–∏—Å—Ç–∞ üì§ \n\n
–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–≤—Ç–æ—Ä–∞ –≤–∏—à–ª–∏—Å—Ç–∞: <b>{wishlist_thanks_message}</b>\n
–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º.
–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π –≤–∏—à–ª–∏—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –Ω–∞–∂–º–∏—Ç–µ /start''',
                reply_markup=ReplyKeyboardRemove(),
                parse_mode=ParseMode.HTML
            )
            logger.info(f'{chat_id} successfully sent postcard to user {wishlist_author_user_id} pic {PIC_INFO[str(context.user_data[PIC_NUM])]}')
            os.system(f"(rm -rf {PIC_FOLDER+'screen_' + str(chat_id) + '.png'})")
            os.system(f"(rm -rf {PIC_FOLDER+'from_'+str(chat_id)+'_'+PIC_INFO[str(context.user_data[PIC_NUM])]['pic_name']})")
            os.system(f"(rm -rf {PIC_FOLDER+'wish_'+str(chat_id)+'_'+PIC_INFO[str(context.user_data[PIC_NUM])]['pic_name']})")
            logger.info(f'all temporary data for {chat_id} was successfully deleted')
        except:
            logger.info(f'{chat_id} wants to send postcard but error occured')
            update.callback_query.bot.send_message(
                chat_id=chat_id,
                text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üòî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞'
            )

    elif init == CALLBACK_BUTTON10_DELETE_WISHLIST:
        context.user_data[FROM_MODE] = 'False'
        context.user_data[WISH_MODE] = 'False'
        context.user_data[DELETE_MODE] = 'True'
        context.user_data[REPLY_MODE] = 'False'
        update.callback_query.bot.send_message(
            chat_id=chat_id,
            text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏—à–ª–∏—Å—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (–ø—Ä–æ—Å—Ç–æ –∏–º—è –±–µ–∑ –∑–Ω–∞–∫–∞ #)",
            reply_markup=ReplyKeyboardRemove(),
        )
    elif init in pd.read_csv(REPLY_BUTTONS_FILE, index_col=0).callback_button_name.values:
        context.user_data[FROM_MODE] = 'False'
        context.user_data[WISH_MODE] = 'False'
        context.user_data[DELETE_MODE] = 'False'
        context.user_data[REPLY_MODE] = 'True'
        context.user_data[REPLY_USER] = init.split('|')[1]
        reply_buttons_df = pd.read_csv(REPLY_BUTTONS_FILE, index_col=0)
        context.user_data[REPLY_WISHLIST] = reply_buttons_df[reply_buttons_df.callback_button_name == init].wishlist.values[-1]
        update.callback_query.bot.send_message(
            chat_id=chat_id,
            text=f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û–Ω–æ –ø—Ä–∏–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞.",
            reply_markup=ReplyKeyboardRemove(),
        )
    elif init[:21] == 'callback_button_reply':
        context.user_data[FROM_MODE] = 'False'
        context.user_data[WISH_MODE] = 'False'
        context.user_data[DELETE_MODE] = 'False'
        context.user_data[REPLY_MODE] = 'False'
        update.callback_query.bot.send_message(
            chat_id=chat_id,
            text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç—É –æ—Ç–∫—Ä—ã—Ç–∫—É —É–∂–µ –Ω–µ–ª—å–∑—è, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–≤–Ω–æ.Ô∏è",
            reply_markup=ReplyKeyboardRemove(),
        )

@debug_request
def message_handler(update: Update, context: CallbackContext):
    text = update.message.text
    user_id = update.message.chat.id
    chat_id = update.message.chat.id
    if text[0] == '#':
        try:
            if context.user_data[DELETE_MODE] == 'True':
                update.message.reply_text('–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤–∏—à–ª–∏—Å—Ç –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ # . –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - /start')
                logger.info(f'{chat_id} tries to delete wishlist but wrote with #')
            else:
                wishlistname = text[1:]
                logger.info(f'{chat_id} tries to find wishlist with name {wishlistname}')
                wishlist = find_wishlist(namelowreg=wishlistname.lower(), limit=1)
                if wishlist:
                    context.user_data[FOUND_WISHLIST] = wishlistname
                    logger.info(f'{chat_id} successfully found wishlist with name {wishlistname}')
                    keyboard = [[InlineKeyboardButton(BUTTON4_GENERATE_POSTCARD,
                                                      callback_data=CALLBACK_BUTTON4_GENERATE_POSTCARD)]]
                    reply_text = print_wishlist(wishlist[0])
                    update.message.reply_text(
                        text=f'''
–í–∏—à–ª–∏—Å—Ç <b>{wishlist[0][1]}</b> –Ω–∞–π–¥–µ–Ω!‚úîÔ∏è

Ô∏è{reply_text}

<b>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –ø–æ–∂–µ—Ä—Ç–≤—É–π—Ç–µ –≤ –æ–¥–Ω—É –∏–∑ —ç—Ç–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–Ø —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ!"</b>''',
                        reply_markup=InlineKeyboardMarkup(keyboard, one_time_keyboard=True),
                        parse_mode=ParseMode.HTML,
                        disable_web_page_preview=True
                    )
                else:
                    logger.info(f'no wishlist with name {wishlistname}')
                    update.message.reply_text(
                        text='–í–∏—à–ª–∏—Å—Ç c —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∏—à–ª–∏—Å—Ç.',
                        reply_markup=ReplyKeyboardRemove()
                    )
        except:
            context.user_data[FROM_MODE] = 'False'
            context.user_data[WISH_MODE] = 'False'
            context.user_data[DELETE_MODE] = 'False'
            context.user_data[REPLY_MODE] = 'False'
            wishlistname = text[1:]
            logger.info(f'{chat_id} tries to find wishlist with name {wishlistname}')
            wishlist = find_wishlist(namelowreg=wishlistname.lower(), limit=1)
            if wishlist:
                context.user_data[FOUND_WISHLIST] = wishlistname
                logger.info(f'{chat_id} successfully found wishlist with name {wishlistname}')
                keyboard = [[InlineKeyboardButton(BUTTON4_GENERATE_POSTCARD, callback_data=CALLBACK_BUTTON4_GENERATE_POSTCARD)]]
                reply_text = print_wishlist(wishlist[0])
                update.message.reply_text(
                    text=f'''
–í–∏—à–ª–∏—Å—Ç <b>{wishlist[0][1]}</b> –Ω–∞–π–¥–µ–Ω!‚úîÔ∏è

{reply_text}

<b>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –ø–æ–∂–µ—Ä—Ç–≤—É–π—Ç–µ –≤ –æ–¥–Ω—É –∏–∑ —ç—Ç–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–Ø —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ!"</b>''',
                    reply_markup=InlineKeyboardMarkup(keyboard, one_time_keyboard=True),
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=True
                )
            else:
                logger.info(f'no wishlist with name {wishlistname}')
                update.message.reply_text(
                    text='–í–∏—à–ª–∏—Å—Ç c —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∏—à–ª–∏—Å—Ç.',
                    reply_markup=ReplyKeyboardRemove()
                )

    else:
        try:
            if context.user_data[WISH_MODE] == 'True':
                wishtext = text
                if len(wishtext) > PIC_INFO[str(context.user_data[PIC_NUM])]['lenths_wish'][-1]:
                    logger.info(f'{chat_id} made too long wish')
                    update.message.reply_text(
                        text="–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –ø–æ–∫–æ—Ä–æ—á–µüòä"
                    )
                else:
                    context.user_data[WISH] = wishtext
                    keyboard = [
                        [InlineKeyboardButton(BUTTON5_ANONYMOUS_SEND, callback_data=CALLBACK_BUTTON5_ANONYMOUS_SEND)],
                        [InlineKeyboardButton(BUTTON6_ADD_NAME, callback_data=CALLBACK_BUTTON6_ADD_NAME)],
                    ]
                    write_text_2(wishtext, context.user_data[PIC_NUM], user_id, 'wish')
                    context.bot.sendPhoto(
                        chat_id=update.message.chat.id,
                        photo=open(PIC_FOLDER+'wish_'+str(user_id)+'_'+PIC_INFO[str(context.user_data[PIC_NUM])]['pic_name'], 'rb'),
                    )
                    update.message.reply_text(
                        text=f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∫—Ä—ã—Ç–∫–∏ ‚¨ÜÔ∏è\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ. –õ–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–∞ –ª–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–µ –ø–æ–¥–ø–∏—Å—å‚¨áÔ∏è",
                        reply_markup=InlineKeyboardMarkup(keyboard, one_time_keyboard=True),
                    )
                    logger.info(f'{chat_id} successfully wrote wish with length {len(wishtext)}')
            elif context.user_data[FROM_MODE] == 'True':
                from_whom = text
                if len(from_whom) > PIC_INFO[str(context.user_data[PIC_NUM])]['lenths_from'][-1]:
                    logger.info(f'{chat_id} made too long from')
                    update.message.reply_text(
                        text="–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å. –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–ø–∏—Å—å –ø–æ–∫–æ—Ä–æ—á–µüòä"
                    )
                else:
                    context.user_data[FROM_WHOM] = from_whom
                    keyboard = [
                        [InlineKeyboardButton(BUTTON7_ADD_SCREENSHOT, callback_data=CALLBACK_BUTTON7_ADD_SCREENSHOT)],
                        [InlineKeyboardButton(BUTTON8_NO_SCREENSHOT, callback_data=CALLBACK_BUTTON8_NO_SCREENSHOT)]
                    ]
                    write_text_2(from_whom, context.user_data[PIC_NUM], user_id, 'from')
                    context.bot.sendPhoto(
                        chat_id=update.message.chat.id,
                        photo=open(PIC_FOLDER+'from_'+str(user_id)+'_'+PIC_INFO[str(context.user_data[PIC_NUM])]['pic_name'], 'rb'),
                    )
                    update.message.reply_text(
                        text=f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∫—Ä—ã—Ç–∫–∏ ‚¨ÜÔ∏è\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ–¥–ø–∏—Å—å, –≤–≤–µ–¥–∏—Ç–µ –µ–µ –∑–∞–Ω–æ–≤–æ. –õ–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.",
                        reply_markup=InlineKeyboardMarkup(keyboard, one_time_keyboard=True),
                    )
                    logger.info(f'{chat_id} successfully wrote from with length {len(from_whom)}')
            elif context.user_data[DELETE_MODE] == 'True':
                wishlistname = text
                wishlist = find_wishlist(namelowreg=wishlistname.lower(), limit=1)
                if wishlist:
                    if wishlist[0][0] != update.message.chat.id:
                        update.message.reply_text('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–∏—à–ª–∏—Å—Ç, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –í—ã –µ–≥–æ —Å–æ–∑–¥–∞–ª–∏. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∏—à–ª–∏—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start')
                    if wishlist[0][0] == update.message.chat.id:
                        delete(namelowreg=wishlistname.lower())
                        update.message.reply_text('–í–∏—à–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω. –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –≤–∏—à–ª–∏—Å—Ç –Ω–∞–∂–º–∏—Ç–µ /start')
                        context.user_data[DELETE_MODE] = 'False'
                        logger.info(f'wishlist {wishlistname} deleted')
                else:
                    update.message.reply_text('–í–∏—à–ª–∏—Å—Ç c —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∏—à–ª–∏—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start')
            elif context.user_data[REPLY_MODE] == 'True':
                reply_message = text
                reply_user_id = int(context.user_data[REPLY_USER])
                reply_wishlist = context.user_data[REPLY_WISHLIST]
                context.bot.send_message(
                    chat_id=reply_user_id,
                    text=f'''
üì©–í–∞–º –Ω–æ–≤–æ–µ –æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–≤—Ç–æ—Ä–∞ –≤–∏—à–ª–∏—Å—Ç–∞ {reply_wishlist} –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à—É –æ—Ç–∫—Ä—ã—Ç–∫—É:

"<b><i>{reply_message}</i></b>"

–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –µ—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∫—É –∞–Ω–æ–Ω–∏–º–Ω–æ, —Ç–æ –∞–≤—Ç–æ—Ä –≤–∏—à–ª–∏—Å—Ç–∞ –Ω–µ –∑–Ω–∞–µ—Ç –∫–æ–º—É –ø—Ä–∏—à–ª–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
''',
                    parse_mode=ParseMode.HTML,
                )
                update.message.reply_text('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')

            else:
                update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞')
        except:
            context.user_data[FROM_MODE] = 'False'
            context.user_data[WISH_MODE] = 'False'
            context.user_data[DELETE_MODE] = 'False'
            update.message.reply_text('–ö–∞–∂–µ—Ç—Å—è –º—ã —Å–ª–∏—à–∫–æ–º –¥–∞–≤–Ω–æ –Ω–µ –æ–±—â–∞–ª–∏—Å—åüòî –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —è –∑–∞–±—ã–ª –æ —á–µ–º –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞')


def photo_handler(update: Update, context: CallbackContext):
    context.user_data[WISH_MODE] = 'False'
    context.user_data[FROM_MODE] = 'False'
    context.user_data[DELETE_MODE] = 'False'
    context.user_data[REPLY_MODE] = 'False'
    name_screenshot = PIC_FOLDER+'screen_'+str(update.message.chat.id)+'.png'
    photo_file = update.message.photo[-1].get_file()
    photo_file.download(name_screenshot)
    logger.info(f'{update.message.chat.id} added screenshot {name_screenshot}')
    keyboard = [[InlineKeyboardButton(BUTTON9_READY, callback_data=CALLBACK_BUTTON9_READY)]]
    update.message.reply_text(
        text='–°–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.\n<b>–û—Ç–ª–∏—á–Ω–æ! –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–≤—Ç–æ—Ä—É –≤–∏—à–ª–∏—Å—Ç–∞?</b>',
        reply_markup=InlineKeyboardMarkup(keyboard, one_time_keyboard=True),
        parse_mode=ParseMode.HTML
    )

@debug_request
def name_handler(update: Update, context: CallbackContext):
    context.user_data[WISH_MODE] = 'False'
    context.user_data[FROM_MODE] = 'False'
    context.user_data[DELETE_MODE] = 'False'
    context.user_data[REPLY_MODE] = 'False'
    name = update.message.text
    if len(name.split(' ')) > 1:
        update.message.reply_text(
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.',
            parse_mode=ParseMode.HTML,
        )
    elif len(name) > 32:
        update.message.reply_text(
            text='–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –≤–∏—à–ª–∏—Å—Ç–∞. –¢–∞–∫ –≤–∞—à–∏–º –¥—Ä—É–∑—å—è–º –±—É–¥–µ—Ç –ø—Ä–æ—â–µ –Ω–∞–π—Ç–∏ –≤–∞—à –≤–∏—à–ª–∏—Å—Ç –∏ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –≤–∞—Å.',
            parse_mode=ParseMode.HTML,
        )
    else:
        if wishlist_name_available(namelowreg=name.lower()):
            context.user_data[NAME] = name
            logger.info('user_data: %s', context.user_data)
            update.message.reply_text(
                text='''
–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ‚úîÔ∏è.

–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –¥—Ä—É–∑—å—è–º.
–ü—Ä–∏–º–µ—Ä:
–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤. –ë—É–¥—É —Ä–∞–¥ –µ—Å–ª–∏ –≤—ã –ø–æ–∂–µ—Ä—Ç–≤—É–µ—Ç–µ –≤ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ–Ω–¥–æ–≤, –¥–ª—è –º–µ–Ω—è –∏—Ö –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞.

–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—à–ª–∏—Å—Ç–∞ - /cancel''',
                parse_mode=ParseMode.HTML,
            )
            return WELCOME_SPEECH
        else:
            update.message.reply_text(
                text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–Ω—è—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.',
                parse_mode=ParseMode.HTML,
            )

def welcome_speech_handler(update: Update, context: CallbackContext):
    welcome_speech = update.message.text
    if len(welcome_speech) > PIC_INFO['6']['lenths_author'][-1]:
        update.message.reply_text(
            text='–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ. –û–Ω–æ –±—É–¥–µ—Ç –æ—á–µ–Ω—å –º–µ–ª–∫–æ —Å–º–æ—Ç—Ä–µ—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ.',
            parse_mode=ParseMode.HTML,
        )
    else:
        context.user_data[WELCOME_SPEECH] = welcome_speech
        update.message.reply_text(
            text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: —Ñ–æ–Ω–¥ –∑–∞—â–∏—Ç—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö "WWF"\n\n–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—à–ª–∏—Å—Ç–∞ - /cancel',
            parse_mode=ParseMode.HTML,
        )
        return FOUNDATION_0

@debug_request
def foundation_0_handler(update: Update, context: CallbackContext):
    foundation_0 = update.message.text
    if len(foundation_0) > PIC_INFO['6']['lenths_fund1'][-1]:
        update.message.reply_text(
            text='–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ–Ω –±—É–¥–µ—Ç –æ—á–µ–Ω—å –º–µ–ª–∫–æ —Å–º–æ—Ä—Ç—Ä–µ—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–≤–∞ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å–∞–º–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ–Ω–¥–∞ –∏–ª–∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –µ–≥–æ –±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–æ.',
            parse_mode=ParseMode.HTML,
        )
    else:
        context.user_data[FOUNDATION_0] = foundation_0
        logger.info('user_data: %s', context.user_data)
        update.message.reply_text(
            text='–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞.\n\n–ü—Ä–∏–º–µ—Ä: –∫–∞—Ä—Ç–∞ —Å–±–µ—Ä–±–∞–Ω–∫–∞ 1111 2222 3333 4444 –ª–∏–±–æ Paypal paypal@mail.ru –ª–∏–±–æ –Ω–∞ —Å–∞–π—Ç–µ www.fund.ru/donate\n\n–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—à–ª–∏—Å—Ç–∞ - /cancel',
            parse_mode=ParseMode.HTML,
        )
        return METHOD_0

@debug_request
def method_0_handler(update: Update, context: CallbackContext):
    context.user_data[METHOD_0] = update.message.text
    context.user_data[N_FOUNDS] = 1
    logger.info('user_data: %s', context.user_data)
    update.message.reply_text(
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.\n\n–ï—Å–ª–∏ –æ–¥–Ω–æ–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–º–∏—Ç–µ /skip . –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—à–ª–∏—Å—Ç–∞ - /cancel",
        )
    return FOUNDATION_1

@debug_request
def foundation_1_handler(update: Update, context: CallbackContext):
    foundation_1 = update.message.text
    if len(foundation_1) > PIC_INFO['6']['lenths_fund2'][-1]:
        update.message.reply_text(
            text='–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ–Ω –±—É–¥–µ—Ç –æ—á–µ–Ω—å –º–µ–ª–∫–æ —Å–º–æ—Ä—Ç—Ä–µ—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–≤–∞ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å–∞–º–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ–Ω–¥–∞ –∏–ª–∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –µ–≥–æ –±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–æ.',
            parse_mode=ParseMode.HTML,
        )
    else:
        context.user_data[FOUNDATION_1] = foundation_1
        logger.info('user_data: %s', context.user_data)
        update.message.reply_text(
            text='–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞\n\n–ü—Ä–∏–º–µ—Ä: –∫–∞—Ä—Ç–∞ —Å–±–µ—Ä–±–∞–Ω–∫–∞ 1111 2222 3333 4444 –ª–∏–±–æ Paypal paypal@mail.ru –ª–∏–±–æ –Ω–∞ —Å–∞–π—Ç–µ www.fund.ru/donate\n\n–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—à–ª–∏—Å—Ç–∞ - /cancel',
            parse_mode=ParseMode.HTML,
        )
        return METHOD_1

@debug_request
def method_1_handler(update: Update, context: CallbackContext):
    context.user_data[METHOD_1] = update.message.text
    context.user_data[N_FOUNDS] = 2
    logger.info('user_data: %s', context.user_data)
    update.message.reply_text(
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–π –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.\n–ï—Å–ª–∏ –¥–≤—É—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–º–∏—Ç–µ /skip . –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—à–ª–∏—Å—Ç–∞ - /cancel",
    )
    return FOUNDATION_2

@debug_request
def foundation_2_handler(update: Update, context: CallbackContext):
    foundation_2 = update.message.text
    if len(foundation_2) > PIC_INFO['6']['lenths_fund3'][-1]:
        update.message.reply_text(
            text='–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ–Ω –±—É–¥–µ—Ç –æ—á–µ–Ω—å –º–µ–ª–∫–æ —Å–º–æ—Ä—Ç—Ä–µ—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–≤–∞ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å–∞–º–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ–Ω–¥–∞ –∏–ª–∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –µ–≥–æ –±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–æ.',
            parse_mode=ParseMode.HTML,
        )
    else:
        context.user_data[FOUNDATION_2] = foundation_2
        logger.info('user_data: %s', context.user_data)
        update.message.reply_text(
            text='–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞\n\n–ü—Ä–∏–º–µ—Ä: –∫–∞—Ä—Ç–∞ —Å–±–µ—Ä–±–∞–Ω–∫–∞ 1111 2222 3333 4444 –ª–∏–±–æ Paypal paypal@mail.ru –ª–∏–±–æ –Ω–∞ —Å–∞–π—Ç–µ www.fund.ru/donate\n\n–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—à–ª–∏—Å—Ç–∞ - /cancel',
            parse_mode=ParseMode.HTML,
        )
        return METHOD_2

@debug_request
def method_2_handler(update: Update, context: CallbackContext):
    context.user_data[METHOD_2] = update.message.text
    context.user_data[N_FOUNDS] = 3
    logger.info('user_data: %s', context.user_data)
    update.message.reply_text(
        text=f'''
–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å. –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞—à–∏ –¥—Ä—É–∑—å—è —É–≤–∏–¥—è—Ç –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤—è—Ç –≤–∞–º –æ—Ç–∫—Ä—ã—Ç–∫—É.

–ü—Ä–∏–º–µ—Ä:
–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ. –í—ã –∫–ª–∞—Å—Å–Ω—ã–µ. –í–∞—à –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ü§ç

–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—à–ª–∏—Å—Ç–∞ - /cancel''',
        parse_mode=ParseMode.HTML,
    )

    return THANKS_SPEECH

@debug_request
def skip(update: Update, context: CallbackContext) -> int:
    logger.info("User %s wants to skip other funds.", context.user_data)
    update.message.reply_text(
        text=f'''
–í–≤–æ–¥ –æ—Ä–∞–Ω–∏–∑–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω
–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å. –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞—à–∏ –¥—Ä—É–∑—å—è —É–≤–∏–¥—è—Ç –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤—è—Ç –≤–∞–º –æ—Ç–∫—Ä—ã—Ç–∫—É.

–ü—Ä–∏–º–µ—Ä:
–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ. –í—ã –∫–ª–∞—Å—Å–Ω—ã–µ. –í–∞—à –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤

–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—à–ª–∏—Å—Ç–∞ - /cancel
''',
        parse_mode=ParseMode.HTML
    )
    return THANKS_SPEECH

@debug_request
def thanks_speech_handler(update: Update, context: CallbackContext) -> int:
    context.user_data[WISH_MODE] = 'False'
    context.user_data[FROM_MODE] = 'False'
    context.user_data[DELETE_MODE] = 'False'
    context.user_data[REPLY_MODE] = 'False'
    user = update.effective_user

    update.message.reply_text(
        text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ–∑–¥–∞–ª–∏ –≤–∏—à–ª–∏—Å—Ç!",
        parse_mode=ParseMode.HTML,
    )

    message_to_del = context.bot.send_message(
        chat_id=int(user.id),
        text=f"‚è≥–ì–æ—Ç–æ–≤–∏–º –∫—Ä–∞—Å–∏–≤—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –≤–∞—à–∏–º –≤–∏—à–ª–∏—Å—Ç–æ–º... ",
        parse_mode=ParseMode.HTML
    )

    delete_flag = 0
    logger.info(f'delteflag={delete_flag}, message id{message_to_del.message_id}')

    name = context.user_data[NAME]
    n_founds = context.user_data[N_FOUNDS]
    foundation0 = context.user_data[FOUNDATION_0]
    method0 = context.user_data[METHOD_0]
    welcome_speech = context.user_data[WELCOME_SPEECH]
    thanks_speech = update.message.text
    if n_founds == 1:
        foundation1 = 'None'
        method1 = 'None'
        foundation2 = 'None'
        method2 = 'None'
    if n_founds == 2:
        foundation1 = context.user_data[FOUNDATION_1]
        method1 = context.user_data[METHOD_1]
        foundation2 = 'None'
        method2 = 'None'
    if n_founds == 3:
        foundation1 = context.user_data[FOUNDATION_1]
        method1 = context.user_data[METHOD_1]
        foundation2 = context.user_data[FOUNDATION_2]
        method2 = context.user_data[METHOD_2]
    if name:
        if foundation0:
            if method0:
                add_message(
                    user_id=user.id,
                    name=name,
                    namelowreg=name.lower(),
                    welcome_speech=welcome_speech,
                    foundation0=foundation0,
                    method0=method0,
                    foundation1=foundation1,
                    method1=method1,
                    foundation2=foundation2,
                    method2=method2,
                    thanks_speech=thanks_speech,
                    n_founds=n_founds
                )

    # –ë–õ–û–ö –°–û–ó–î–ê–ù–ò–Ø –ö–ê–†–¢–ò–ù–ö–ò
    wishlist_pic_name_white = print_wishlist_as_a_picture(n_founds, welcome_speech, name, foundation0, foundation1,
                                                          foundation2, user.id, picstyle='dark')
    wishlist_pic_name_dark = print_wishlist_as_a_picture(n_founds, welcome_speech, name, foundation0, foundation1,
                                                         foundation2, user.id, picstyle='white')
    context.bot.send_media_group(
        chat_id=user.id,
        media=[InputMediaPhoto(open(wishlist_pic_name_white, 'rb')),
               InputMediaPhoto(open(wishlist_pic_name_dark, 'rb'))]
    )
    os.system(f"(rm -rf {PIC_FOLDER + '*_' + str(user.id) + '_' + PIC_INFO['4']['pic_name']})")
    os.system(f"(rm -rf {PIC_FOLDER + '*_' + str(user.id) + '_' + PIC_INFO['5']['pic_name']})")
    os.system(f"(rm -rf {PIC_FOLDER + '*_' + str(user.id) + '_' + PIC_INFO['6']['pic_name']})")
    os.system(f"(rm -rf {PIC_FOLDER + '*_' + str(user.id) + '_' + PIC_INFO['7']['pic_name']})")
    os.system(f"(rm -rf {PIC_FOLDER + '*_' + str(user.id) + '_' + PIC_INFO['8']['pic_name']})")
    os.system(f"(rm -rf {PIC_FOLDER + '*_' + str(user.id) + '_' + PIC_INFO['9']['pic_name']})")
    logger.info(f'all temporary data for {user.id} was successfully deleted')

    delete_flag = 1
    if delete_flag == 1:
        context.bot.delete_message(
            chat_id=int(user.id),
            message_id=message_to_del.message_id
        )

    update.message.reply_text(
            text=f'''
<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º —Ç–µ–≥ #{name} –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ https://t.me/MoreThanPostcardBot
–õ–∏–±–æ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –ª—é–±–æ–π –∏–∑ —ç—Ç–∏—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö. </b>

–¢–µ–ø–µ—Ä—å –ª—é–±–æ–π —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —É–∑–Ω–∞–µ—Ç –æ –≤–∞—à–µ–º –≤–∏—à–ª–∏—Å—Ç–µ, —Å–º–æ–∂–µ—Ç –≤–≤–µ—Å—Ç–∏ #{name} –≤ –±–æ—Ç–µ –∏ —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ—Ç –≤–∏—à–ª–∏—Å—Ç –≤ –ø–æ–ª–Ω–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ —Å–æ –≤—Å–µ–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –∏ –º–µ—Ç–æ–¥–∞–º–∏ –æ–ø–ª–∞—Ç—ã.

–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∏—à–ª–∏—Å—Ç –Ω–∞–∂–º–∏—Ç–µ /start
    ''',
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )

    #if n_founds == 1:
    #    reply_text = print_1_fund(name, welcome_speech, foundation0, method0, thanks_speech)
    #if n_founds == 2:
    #    foundation1 = context.user_data[FOUNDATION_1]
    #    method1 = context.user_data[METHOD_1]
    #    reply_text = print_2_funds(name, welcome_speech, foundation0, method0, foundation1, method1, thanks_speech)
    #if n_founds == 3:
    #    foundation1 = context.user_data[FOUNDATION_1]
    #    method1 = context.user_data[METHOD_1]
    #    foundation2 = context.user_data[FOUNDATION_2]
    #    method2 = context.user_data[METHOD_2]
    #    reply_text = print_3_funds(name, welcome_speech, foundation0, method0, foundation1, method1, foundation2, method2, thanks_speech)
    #update.message.reply_text(
    #    text=f"{reply_text}",
    #    parse_mode=ParseMode.HTML,
    #    disable_web_page_preview=True
    #)

    return ConversationHandler.END

@debug_request
def cancel_handler(update: Update, context: CallbackContext) -> int:
    context.user_data[WISH_MODE] = 'False'
    context.user_data[FROM_MODE] = 'False'
    context.user_data[DELETE_MODE] = 'False'
    context.user_data[REPLY_MODE] = 'False'
    logger.info(f'{update.message.chat.id} cancelled making wishlist')
    update.message.reply_text(
        text='–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—à–ª–∏—Å—Ç–∞. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∂–º–∏—Ç–µ /start',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


@debug_request
def about(update: Update, context: CallbackContext):
    context.user_data[WISH_MODE] = 'False'
    context.user_data[FROM_MODE] = 'False'
    context.user_data[DELETE_MODE] = 'False'
    context.user_data[REPLY_MODE] = 'False'
    keyboard = [
        [InlineKeyboardButton(BUTTON1_FIND, callback_data=CALLBACK_BUTTON1_FIND)],
        [InlineKeyboardButton(BUTTON2_MAKE, callback_data=CALLBACK_BUTTON2_MAKE)],
        [InlineKeyboardButton(BUTTON3_SHOW, callback_data=CALLBACK_BUTTON3_SHOW)],
    ]
    update.message.reply_text(
        text='''
*–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ ¬´–í–º–µ—Å—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∫–∏¬ª:*

–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –≤–∏—à–ª–∏—Å—Ç: —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –≤ –æ–¥–Ω—É –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤–∞—à–∏ –¥—Ä—É–∑—å—è –º–æ–≥—É—Ç —Å–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥–∞—Ä–∫–∞ –≤–∞–º.
–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –≤–∏—à–ª–∏—Å—Ç –≤ –∫—Ä–∞—Å–∏–≤–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º –∏ –¥—Ä—É–≥–∏–µ —Å–æ—Ü—Å–µ—Ç–∏.

–¢–∞–∫–∂–µ –±–æ—Ç –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤–∏—à–ª–∏—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–∫—Ä—ã—Ç–∫—É –µ–≥–æ –∞–≤—Ç–æ—Ä—É. –û—Ç–∫—Ä—ã—Ç–∫—É –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∞–Ω–æ–Ω–∏–º–Ω–æ —Ç–∞–∫ –∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.

–ë–æ—Ç –Ω–µ —Ö—Ä–∞–Ω–∏—Ç –Ω–∏–∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è—Ö –æ—Ç–∫—Ä—ã—Ç–æ–∫. –ö–æ–≥–¥–∞ –≤—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Ç–≤—É–µ—Ç–µ —Å —á—å–∏–º-—Ç–æ –≤–∏—à–ª–∏—Å—Ç–æ–º –≤–∞—à–µ –∏–º—è –Ω–∏–≥–¥–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è. –ò–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –¥–∞–∂–µ –∞–≤—Ç–æ—Ä—ã –±–æ—Ç–∞ –Ω–µ –º–æ–≥—É—Ç —É–∑–Ω–∞—Ç—å –∫–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∫–∏.

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?*
[–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –≤–∏—à–ª–∏—Å—Ç](https://telegra.ph/Vmesto-Otkrytki-05-15)
[–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É](https://telegra.ph/Vmesto-Otkrytki-05-15-2)

–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞–º [66hellena66](https://www.instagram.com/66hellena66/) –∏ [–°—Ç—É–¥–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –°—Ç–∞–Ω–∏—Å–ª–∞–≤–∞ –ì–æ—Ä–∞](http://logotype.su)
–¢–µ–ª–µ–≥—Ä–∞–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ - [@neverending_why](@neverending_why). –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –µ—Å–ª–∏ —É–≤–∏–¥–µ–ª–∏ –æ—à–∏–±–∫—É –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ —É–ª—É—á—à–∏—Ç—å –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞. –ú—ã —Ä–∞–¥—ã –ª—é–±—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –∏ –∑–∞–º–µ—á–∞–Ω–∏—è–º.ü§ç

*–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:*
''',
        reply_markup=InlineKeyboardMarkup(keyboard, one_time_keyboard=True),
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True
    )


def main():
    logger.info('Start bot')


    req = Request(
        connect_timeout=0.5,
        read_timeout=1.0,
    )
    bot = Bot(
        token=TG_TOKEN,
        request=req,
    )
    updater = Updater(
        bot=bot,
        use_context=True,
    )
    info = bot.get_me()
    logger.info(f'Bot info {info}')

    init_db()

    conv_create_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(do_create, pass_user_data=True),
        ],
        states={
            NAME: [
                MessageHandler(Filters.text, name_handler, pass_user_data=True),
            ],
            WELCOME_SPEECH: [
                MessageHandler(Filters.text, welcome_speech_handler, pass_user_data=True),
            ],
            FOUNDATION_0: [
                MessageHandler(Filters.text, foundation_0_handler, pass_user_data=True),
            ],
            METHOD_0: [
                MessageHandler(Filters.text, method_0_handler, pass_user_data=True),
            ],
            FOUNDATION_1: [
                MessageHandler(Filters.text, foundation_1_handler, pass_user_data=True),
                CommandHandler('skip', skip),
            ],
            METHOD_1: [
                MessageHandler(Filters.text, method_1_handler, pass_user_data=True),
            ],
            FOUNDATION_2: [
                MessageHandler(Filters.text, foundation_2_handler, pass_user_data=True),
                CommandHandler('skip', skip),
            ],
            METHOD_2: [
                MessageHandler(Filters.text, method_2_handler, pass_user_data=True),
            ],
            THANKS_SPEECH: [
                MessageHandler(Filters.text, thanks_speech_handler, pass_user_data=True),
            ]
        },
        fallbacks=[
            CommandHandler('cancel', cancel_handler),
            CommandHandler('start', start_buttons_handler)
        ],
    )

    updater.dispatcher.add_handler(conv_create_handler)
    updater.dispatcher.add_handler(CommandHandler('start', start_buttons_handler))
    updater.dispatcher.add_handler(CommandHandler('about', about))
    updater.dispatcher.add_handler(MessageHandler(Filters.text, message_handler))
    updater.dispatcher.add_handler(MessageHandler(Filters.photo, photo_handler))
    updater.dispatcher.add_handler(CommandHandler('mybday', set_timer_bday))
    updater.dispatcher.add_handler(CommandHandler('stopreminder', remove_timer_bday))
    updater.dispatcher.add_handler(CommandHandler('notify_all_users', notify_all_users_admin))
    updater.dispatcher.add_handler(CommandHandler('reset_all_timers', reset_all_timers_admin))
    updater.dispatcher.add_handler(CommandHandler('show_jobs_by_name', show_jobs_by_name))

    updater.start_polling()
    updater.idle()
    logger.info('Stop bot')

if __name__ == '__main__':
    main()
